<script type="text/javascript">
    function Pricing(){
        let that = this;
        this.variantPriceMap;
        this.priceModifierMap;
        this.basePrice;
        this.product;
        this.finalPrice;
        this.currency;
        this.targetPriceClassPrefix='.js-product-price-';
        this.productContainerPrefix='.js-product';

        this.init = (product,price,variantPriceMap,priceModifierMap,currency)=>{
            that.variantPriceMap  = variantPriceMap;
            that.priceModifierMap = priceModifierMap;
            that.productContainerId = `${that.productContainerPrefix}-${product.id}`;
            that.currency  = currency;
            that.product   = product;
            that.basePrice = price;
            that.targetPriceClass = `${that.targetPriceClassPrefix}-${product.id}`;

            that.updatePrice(); //update on startup;
        };

        this.calculatePrice = ()=>{
            const cur_variant_price_diff  = that.compute_variant_price_diff();
            const cur_configuration_price = that.compute_configuration_price();
            const cur_customization_price = that.compute_customization_price();
            that.finalPrice = that.basePrice + cur_variant_price_diff + cur_configuration_price + cur_customization_price;
        };

        this.updatePrice = ()=>{
            that.calculatePrice();
            const region = $.formatCurrency.getRegionFromCurrency(that.currency);
            $(that.targetPriceClass).text(that.finalPrice.toFixed(2)).formatCurrency({region:region});
        };

        this.isNumeric = input=>((input - 0) == input && input.length > 0);

        this.compute_variant_price_diff = ()=>{
            //to be implemented.
            return 0;
        };

        this.compute_configuration_price = ()=>{
            let configuration_price = 0;

            $(`${that.productContainerId} select.ad-hoc-option-select, ${that.productContainerId} input:checked.ad-hoc-option-select`).each(function() {
                // the prompt: 'None' in the select tag yields an empty string, which I can't use in the price calcuation
                let val = $(this).val();

                // now in case we are a multiple select, de-array
                if ($.isArray(val)) {
                    $.each(val, function(index, value) {
                        if (that.isNumeric(value)) {
                            configuration_price += that.priceModifierMap[value];
                        }
                    });
                } else {
                    if (that.isNumeric(val)) {
                        configuration_price += that.priceModifierMap[val];
                    }
                }
            });

            return configuration_price;
        }

        this.compute_customization_price = ()=>{
            //to be implemented
            return 0;
        };

        $('body').on('change', "#product-variants input[type='radio']", this.updatePrice);
        $('body').on('change', ".ad-hoc-option-select", this.updatePrice);
    }

    $(function(){
        let variant_price_map  = {};
        let price_modifier_map = {};

        <% if @product.has_variants? %>
          <% @product.variants.active.each_with_index do |variant, index| %>
            variant_price_map[<%= variant.id %>] = <%= variant.price %>;
          <% end %>
        <% end %>

        <% @product.ad_hoc_option_types.each do |product_option_type| %>
          <% product_option_type.option_values.each do |product_option_value| %>
            price_modifier_map[<%= product_option_value.id %>] = <%= product_option_value.price_modifier %>;
          <% end %>
        <% end %>

        let pricing = new Pricing();
        pricing.init(<%= raw @product.to_json %>,<%= @product.price %>,variant_price_map,price_modifier_map,"<%= @product.currency %>");
    })
</script>